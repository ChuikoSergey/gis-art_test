// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Trips.Data.Context;

#nullable disable

namespace Trips.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Trips.Core.Entities.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("PayableTime")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ee159f08-4a14-4d69-8f9f-92cebbfbd19c"),
                            Name = "Jack"
                        },
                        new
                        {
                            Id = new Guid("37bd6a0b-d6d6-4525-ac7b-e673717ec8ad"),
                            Name = "Joanne"
                        });
                });

            modelBuilder.Entity("Trips.Core.Entities.Passenger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Passengers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d277cff1-88ab-4b5a-a89f-6fc3535e3a8f"),
                            Name = "Jin"
                        },
                        new
                        {
                            Id = new Guid("c1a9ec7c-87de-4884-ae03-b87afa0228df"),
                            Name = "Bill"
                        },
                        new
                        {
                            Id = new Guid("cb34f6ff-6a81-4f8a-a98c-7b3fed4903ae"),
                            Name = "Sam"
                        },
                        new
                        {
                            Id = new Guid("39a4b601-45cc-49d0-bf27-ddf0ccd22f6b"),
                            Name = "John"
                        });
                });

            modelBuilder.Entity("Trips.Core.Entities.Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("DestinationPlaceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<string>("StartPlaceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TripEndTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TripStartTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1cc80906-88e3-4baf-9855-a4ec131b7307"),
                            DestinationPlaceName = "Place B",
                            DriverId = new Guid("ee159f08-4a14-4d69-8f9f-92cebbfbd19c"),
                            StartPlaceName = "Place A",
                            TripEndTimestamp = new DateTime(2012, 4, 23, 1, 15, 0, 0, DateTimeKind.Utc),
                            TripStartTimestamp = new DateTime(2012, 4, 23, 1, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("84e53efd-a138-4f61-acf4-11de6888475d"),
                            DestinationPlaceName = "Place Bb",
                            DriverId = new Guid("ee159f08-4a14-4d69-8f9f-92cebbfbd19c"),
                            StartPlaceName = "Place Aa",
                            TripEndTimestamp = new DateTime(2012, 4, 23, 2, 2, 0, 0, DateTimeKind.Utc),
                            TripStartTimestamp = new DateTime(2012, 4, 23, 2, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("68e92246-76c9-410b-8f73-dfa62b32edd4"),
                            DestinationPlaceName = "Place B",
                            DriverId = new Guid("ee159f08-4a14-4d69-8f9f-92cebbfbd19c"),
                            StartPlaceName = "Place C",
                            TripEndTimestamp = new DateTime(2012, 4, 23, 3, 47, 0, 0, DateTimeKind.Utc),
                            TripStartTimestamp = new DateTime(2012, 4, 23, 3, 33, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("b6bc9b3b-c45e-45ce-94d7-746acdb64f63"),
                            DestinationPlaceName = "Place C",
                            DriverId = new Guid("37bd6a0b-d6d6-4525-ac7b-e673717ec8ad"),
                            StartPlaceName = "Place B",
                            TripEndTimestamp = new DateTime(2012, 4, 23, 1, 22, 0, 0, DateTimeKind.Utc),
                            TripStartTimestamp = new DateTime(2012, 4, 23, 1, 6, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("07e8a2dc-e96b-4f7d-831f-c6cae84edd83"),
                            DestinationPlaceName = "Place B",
                            DriverId = new Guid("37bd6a0b-d6d6-4525-ac7b-e673717ec8ad"),
                            StartPlaceName = "Place C",
                            TripEndTimestamp = new DateTime(2012, 4, 23, 2, 43, 23, 0, DateTimeKind.Utc),
                            TripStartTimestamp = new DateTime(2012, 4, 23, 2, 6, 15, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("94130245-d7d9-4788-a758-77065f1d22d1"),
                            DestinationPlaceName = "Place Bb",
                            DriverId = new Guid("37bd6a0b-d6d6-4525-ac7b-e673717ec8ad"),
                            StartPlaceName = "Place Aa",
                            TripEndTimestamp = new DateTime(2012, 4, 23, 3, 59, 0, 0, DateTimeKind.Utc),
                            TripStartTimestamp = new DateTime(2012, 4, 23, 3, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Trips.Core.Entities.TripPassenger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("PassengerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId");

                    b.HasIndex("TripId");

                    b.ToTable("TripPassengers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("75d70806-47e9-410f-82d5-77ecb5c74bb5"),
                            PassengerId = new Guid("c1a9ec7c-87de-4884-ae03-b87afa0228df"),
                            TripId = new Guid("1cc80906-88e3-4baf-9855-a4ec131b7307")
                        },
                        new
                        {
                            Id = new Guid("fb3c688a-8589-4bf7-8bc8-8577850ce545"),
                            PassengerId = new Guid("cb34f6ff-6a81-4f8a-a98c-7b3fed4903ae"),
                            TripId = new Guid("1cc80906-88e3-4baf-9855-a4ec131b7307")
                        },
                        new
                        {
                            Id = new Guid("2bb56d1f-fabe-4044-b519-f8050a0a5afb"),
                            PassengerId = new Guid("d277cff1-88ab-4b5a-a89f-6fc3535e3a8f"),
                            TripId = new Guid("1cc80906-88e3-4baf-9855-a4ec131b7307")
                        },
                        new
                        {
                            Id = new Guid("3f9a4bce-1c59-43ca-8e4e-23a39418a46f"),
                            PassengerId = new Guid("39a4b601-45cc-49d0-bf27-ddf0ccd22f6b"),
                            TripId = new Guid("68e92246-76c9-410b-8f73-dfa62b32edd4")
                        },
                        new
                        {
                            Id = new Guid("c19c99f6-7e93-43a8-a98f-94cb44298d35"),
                            PassengerId = new Guid("39a4b601-45cc-49d0-bf27-ddf0ccd22f6b"),
                            TripId = new Guid("07e8a2dc-e96b-4f7d-831f-c6cae84edd83")
                        },
                        new
                        {
                            Id = new Guid("c445fb2b-e8ef-471f-8193-d25a2689b8cc"),
                            PassengerId = new Guid("cb34f6ff-6a81-4f8a-a98c-7b3fed4903ae"),
                            TripId = new Guid("94130245-d7d9-4788-a758-77065f1d22d1")
                        });
                });

            modelBuilder.Entity("Trips.Core.Entities.Trip", b =>
                {
                    b.HasOne("Trips.Core.Entities.Driver", "Driver")
                        .WithMany("Trips")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Trips.Core.Entities.TripPassenger", b =>
                {
                    b.HasOne("Trips.Core.Entities.Passenger", "Passenger")
                        .WithMany("Trips")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trips.Core.Entities.Trip", "Trip")
                        .WithMany("Passengers")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Passenger");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Trips.Core.Entities.Driver", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Trips.Core.Entities.Passenger", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Trips.Core.Entities.Trip", b =>
                {
                    b.Navigation("Passengers");
                });
#pragma warning restore 612, 618
        }
    }
}
